IMPORTANTE: Configuração Pendente em Program.cs

A seguinte configuração para AzureOpenAIOptions não pôde ser aplicada automaticamente ao arquivo Program.cs devido a limitações da ferramenta de edição de código.

Esta configuração é recomendada para carregar e validar as configurações do Azure OpenAI na inicialização da aplicação e deve ser adicionada manualmente:

Em Program.cs, após a linha:
builder.Services.AddHttpClient<IAzureOpenAIService, AzureOpenAIService>();

Adicionar:
// TODO: Configurar AzureOpenAIOptions
// A seguinte configuração para AzureOpenAIOptions não pôde ser aplicada automaticamente.
// Ela é recomendada para carregar e validar as configurações do Azure OpenAI na inicialização.
// builder.Services.AddOptions<AzureOpenAIOptions>()
//     .Bind(builder.Configuration.GetSection("AzureOpenAI"))
//     .ValidateDataAnnotations()
//     .ValidateOnStart();

Referência: AzureOpenAIOptions.cs (em Models) e a refatoração do AzureOpenAIService.cs.

---
IMPORTANTE: Configuração Pendente do FluentValidation em Program.cs

O pacote FluentValidation.AspNetCore foi adicionado ao projeto e as classes de validação foram criadas (ex: PromptRequestValidator, EmailRequestValidator). Os controllers foram atualizados para remover a validação manual.

No entanto, o registro do FluentValidation no pipeline de serviços do ASP.NET Core não pôde ser aplicado automaticamente ao arquivo Program.cs devido a limitações da ferramenta de edição de código.

Esta configuração é essencial para que o FluentValidation intercepte e valide automaticamente os modelos de request. Ela deve ser adicionada manualmente:

Em Program.cs, após a linha `builder.Services.AddControllers();` (e idealmente após a adição dos using statements para FluentValidation e os Validators), adicionar:

// TODO: Registrar FluentValidation
// A seguinte configuração para FluentValidation não pôde ser aplicada automaticamente.
// builder.Services.AddFluentValidationAutoValidation();
// builder.Services.AddValidatorsFromAssemblyContaining<PromptRequestValidator>(); // Ou outra classe de validador do seu assembly

Referência: Validators/PromptRequestValidator.cs, Validators/EmailRequestValidator.cs.
